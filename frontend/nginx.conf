user nginx;
worker_processes 1;

pid /var/run/nginx.pid;

events {
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    server_tokens off;

    server {
        listen 80;
        listen [::]:80;
        server_name songrat.ing;

        # proxy requests to /api to the backend
        # e.g. "frontend/api/users" -> "backend/users"
        # (this is allowed via http)
        location /api/ {
            rewrite ^/api/(.*)$ /$1 break; # remove "/api" prefix
            proxy_pass http://backend:3000;
        }
        location = /api {
            proxy_pass http://backend:3000/;
        }

        # redirect to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name songrat.ing;

        ssl_certificate /etc/letsencrypt/live/songrat.ing/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/songrat.ing/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'HIGH:!aNULL:!MD5';

        root /usr/share/nginx/html;
        charset utf-8;

        location / {
            # try adding .html extension to invalid paths
            try_files $uri $uri.html $uri/ =404;
        }

        location /home {
            return 301 /;
        }

        location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|woff2?|ttf|svg|eot|otf|webp)$ {
            expires 0;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires 0;
        }

        # custom 404 page
        error_page 404 /404.html;

        # proxy requests to /api to the backend
        # e.g. "frontend/api/users" -> "backend/users"
        location /api/ {
            rewrite ^/api/(.*)$ /$1 break; # remove "/api" prefix
            proxy_pass http://backend:3000;
        }
        location = /api {
            proxy_pass http://backend:3000/;
        }
    }
}
